// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package authmodels

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOTP = `-- name: CreateOTP :one
INSERT INTO otps (
    expires_at,
    is_active,
    user_id
) VALUES (
    $1,
    $2,
    $3
)
RETURNING id, created_at, expires_at, is_active, user_id
`

type CreateOTPParams struct {
	ExpiresAt pgtype.Timestamptz
	IsActive  bool
	UserID    pgtype.UUID
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) (Otp, error) {
	row := q.db.QueryRow(ctx, createOTP, arg.ExpiresAt, arg.IsActive, arg.UserID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsActive,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email
) VALUES (
    $1
)
RETURNING id, created_at, email
`

func (q *Queries) CreateUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, createUser, email)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Email)
	return i, err
}

const deactivateAllUserOTPs = `-- name: DeactivateAllUserOTPs :exec
UPDATE otps
SET is_active = FALSE
WHERE user_id = $1
`

func (q *Queries) DeactivateAllUserOTPs(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deactivateAllUserOTPs, userID)
	return err
}

const deactivateOTP = `-- name: DeactivateOTP :exec
UPDATE otps
SET is_active = FALSE
WHERE id = $1
`

func (q *Queries) DeactivateOTP(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deactivateOTP, id)
	return err
}

const getLatestOTPByUser = `-- name: GetLatestOTPByUser :one
SELECT id, created_at, expires_at, is_active, user_id FROM otps
WHERE user_id = $1
ORDER BY created_at desc
LIMIT 1
`

func (q *Queries) GetLatestOTPByUser(ctx context.Context, userID pgtype.UUID) (Otp, error) {
	row := q.db.QueryRow(ctx, getLatestOTPByUser, userID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsActive,
		&i.UserID,
	)
	return i, err
}

const getOTP = `-- name: GetOTP :one
SELECT id, created_at, expires_at, is_active, user_id FROM otps
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOTP(ctx context.Context, id pgtype.UUID) (Otp, error) {
	row := q.db.QueryRow(ctx, getOTP, id)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.IsActive,
		&i.UserID,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, email FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Email)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, email FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Email)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, created_at, email FROM users
WHERE id = ANY($1::text[])
`

func (q *Queries) GetUsers(ctx context.Context, dollar_1 []string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
