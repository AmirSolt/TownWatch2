package paymenttemplates

import "townwatch/services/payment/paymentmodels"
import "github.com/stripe/stripe-go/v76"
import "fmt"
import "sort"

templ Tiers(subscTier paymentmodels.Tier, subsc *stripe.Subscription, prices  map[paymentmodels.Tier]*stripe.Price) {
	for _, tierInt := range sortedMapKeys(prices) {
		@Tier(subscTier, subsc, paymentmodels.Tier(tierInt), prices[paymentmodels.Tier(tierInt)])
	}
}

templ  Tier(subscTier paymentmodels.Tier, subsc *stripe.Subscription, currentTier paymentmodels.Tier, currentPrice *stripe.Price) {
	<div>
		<p>{ currentPrice.Nickname } </p>
		<p>{ fmt.Sprintf("%v",currentPrice.UnitAmount) }/{ string(currentPrice.Recurring.Interval) } </p>
		if subscTier == currentTier {
			if subsc.CancelAtPeriodEnd {
				<p>Auto: False</p>
			} else {
				<p>Auto: True</p>
			}
		} else {
			<p><strike>Auto </strike> </p>
		}
		if  subscTier == currentTier {
			<form action={ templ.SafeURL(fmt.Sprintf("/subscription/cancel/%v", currentTier)) } method="post">
				<button type="submit">
					Cancel
				</button>
			</form>
		} else if subscTier > currentTier {
			<form action={ templ.SafeURL(fmt.Sprintf("/subscription/change/%v", currentTier)) } method="post">
				<button type="submit">
					Downgrade
				</button>
			</form>
		} else {
			<form action={ templ.SafeURL(fmt.Sprintf("/subscription/change/%v", currentTier)) } method="post">
				<button type="submit">
					Upgrade
				</button>
			</form>
		}
	</div>
}

func sortedMapKeys(prices map[paymentmodels.Tier]*stripe.Price) []int {
	var keys []int
	for tier := range prices {
		keys = append(keys, int(tier))
	}
	sort.Ints(keys)

	return keys
}
