// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package paymentmodels

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getCustomer = `-- name: GetCustomer :one
SELECT id, created_at, email, tier_id, stripe_customer_id, stripe_subscription_id, user_id FROM customers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int32) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Email,
		&i.TierID,
		&i.StripeCustomerID,
		&i.StripeSubscriptionID,
		&i.UserID,
	)
	return i, err
}

const getCustomerByStripeCustomerID = `-- name: GetCustomerByStripeCustomerID :one
SELECT id, created_at, email, tier_id, stripe_customer_id, stripe_subscription_id, user_id FROM customers
WHERE stripe_customer_id = $1 LIMIT 1
`

func (q *Queries) GetCustomerByStripeCustomerID(ctx context.Context, stripeCustomerID pgtype.Text) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByStripeCustomerID, stripeCustomerID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Email,
		&i.TierID,
		&i.StripeCustomerID,
		&i.StripeSubscriptionID,
		&i.UserID,
	)
	return i, err
}

const getCustomerByUserID = `-- name: GetCustomerByUserID :one
SELECT id, created_at, email, tier_id, stripe_customer_id, stripe_subscription_id, user_id FROM customers
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetCustomerByUserID(ctx context.Context, userID pgtype.UUID) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByUserID, userID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Email,
		&i.TierID,
		&i.StripeCustomerID,
		&i.StripeSubscriptionID,
		&i.UserID,
	)
	return i, err
}

const updateCustomerStripeCustomerID = `-- name: UpdateCustomerStripeCustomerID :exec
UPDATE customers
SET stripe_customer_id = $1
WHERE id = $2
`

type UpdateCustomerStripeCustomerIDParams struct {
	StripeCustomerID pgtype.Text
	ID               int32
}

func (q *Queries) UpdateCustomerStripeCustomerID(ctx context.Context, arg UpdateCustomerStripeCustomerIDParams) error {
	_, err := q.db.Exec(ctx, updateCustomerStripeCustomerID, arg.StripeCustomerID, arg.ID)
	return err
}

const updateCustomerSubAndTier = `-- name: UpdateCustomerSubAndTier :exec
UPDATE customers
SET 
stripe_subscription_id = $1,
tier_id = $2
WHERE id = $3
`

type UpdateCustomerSubAndTierParams struct {
	StripeSubscriptionID pgtype.Text
	TierID               TierID
	ID                   int32
}

func (q *Queries) UpdateCustomerSubAndTier(ctx context.Context, arg UpdateCustomerSubAndTierParams) error {
	_, err := q.db.Exec(ctx, updateCustomerSubAndTier, arg.StripeSubscriptionID, arg.TierID, arg.ID)
	return err
}
