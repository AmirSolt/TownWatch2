// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package paymentmodels

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TierID string

const (
	TierIDT0 TierID = "t0"
	TierIDT1 TierID = "t1"
	TierIDT2 TierID = "t2"
)

func (e *TierID) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TierID(s)
	case string:
		*e = TierID(s)
	default:
		return fmt.Errorf("unsupported scan type for TierID: %T", src)
	}
	return nil
}

type NullTierID struct {
	TierID TierID
	Valid  bool // Valid is true if TierID is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTierID) Scan(value interface{}) error {
	if value == nil {
		ns.TierID, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TierID.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTierID) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TierID), nil
}

type Customer struct {
	ID                   int32
	CreatedAt            pgtype.Timestamptz
	Email                string
	TierID               TierID
	StripeCustomerID     pgtype.Text
	StripeSubscriptionID pgtype.Text
	UserID               pgtype.UUID
}
